=begin
#DialMyCalls API

#The DialMyCalls API

OpenAPI spec version: 2.0.1
Contact: support@dialmycalls.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module DialMyCalls
  class GroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add Group
    # Add a contact group. <br><br> Returns a group object on success, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X POST -d \"{\\\"name\\\": \\\"Test Group\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/group ```
    # @param create_group_parameters Request body
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_group(create_group_parameters, opts = {})
      data, _status_code, _headers = create_group_with_http_info(create_group_parameters, opts)
      return data
    end

    # Add Group
    # Add a contact group. &lt;br&gt;&lt;br&gt; Returns a group object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Group\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/group &#x60;&#x60;&#x60;
    # @param create_group_parameters Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_group_with_http_info(create_group_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.create_group ..."
      end
      # verify the required parameter 'create_group_parameters' is set
      fail ArgumentError, "Missing the required parameter 'create_group_parameters' when calling GroupsApi.create_group" if create_group_parameters.nil?
      # resource path
      local_var_path = "/group".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_group_parameters)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#create_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Group
    # Delete a contact group. <br><br> Returns the following if a valid identifier was provided, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/group/$GROUP_ID ```
    # @param group_id GroupId
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_group_by_id(group_id, opts = {})
      data, _status_code, _headers = delete_group_by_id_with_http_info(group_id, opts)
      return data
    end

    # Delete Group
    # Delete a contact group. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/group/$GROUP_ID &#x60;&#x60;&#x60;
    # @param group_id GroupId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_group_by_id_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.delete_group_by_id ..."
      end
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.delete_group_by_id" if group_id.nil?
      # resource path
      local_var_path = "/group/{GroupId}".sub('{format}','json').sub('{' + 'GroupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#delete_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Group
    # Retrieve a contact group. <br><br> Returns a group object if a valid identifier was provided, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X GET https://$API_KEY@api.dialmycalls.com/2.0/group/$GROUP_ID ```
    # @param group_id GroupId
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_group_by_id(group_id, opts = {})
      data, _status_code, _headers = get_group_by_id_with_http_info(group_id, opts)
      return data
    end

    # Get Group
    # Retrieve a contact group. &lt;br&gt;&lt;br&gt; Returns a group object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/group/$GROUP_ID &#x60;&#x60;&#x60;
    # @param group_id GroupId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_group_by_id_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.get_group_by_id ..."
      end
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.get_group_by_id" if group_id.nil?
      # resource path
      local_var_path = "/group/{GroupId}".sub('{format}','json').sub('{' + 'GroupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Groups
    # Retrieve a list of contact groups. <br><br> Returns a list of group objects. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X GET https://$API_KEY@api.dialmycalls.com/2.0/groups ```
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range Range (ie \&quot;records&#x3D;201-300\&quot;) of groups requested
    # @return [Object]
    def get_groups(opts = {})
      data, _status_code, _headers = get_groups_with_http_info(opts)
      return data
    end

    # List Groups
    # Retrieve a list of contact groups. &lt;br&gt;&lt;br&gt; Returns a list of group objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/groups &#x60;&#x60;&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range Range (ie \&quot;records&#x3D;201-300\&quot;) of groups requested
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.get_groups ..."
      end
      # resource path
      local_var_path = "/groups".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Range'] = opts[:'range'] if !opts[:'range'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Group
    # Update an existing contact group. <br><br> Returns a group object if a valid identifier was provided and input validation passed, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X PUT -d \"{\\\"name\\\": \\\"Test Group Updated\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/group/$GROUP_ID ```
    # @param update_group_by_id_parameters Request body
    # @param group_id GroupId
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_group_by_id(update_group_by_id_parameters, group_id, opts = {})
      data, _status_code, _headers = update_group_by_id_with_http_info(update_group_by_id_parameters, group_id, opts)
      return data
    end

    # Update Group
    # Update an existing contact group. &lt;br&gt;&lt;br&gt; Returns a group object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Group Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/group/$GROUP_ID &#x60;&#x60;&#x60;
    # @param update_group_by_id_parameters Request body
    # @param group_id GroupId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_group_by_id_with_http_info(update_group_by_id_parameters, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.update_group_by_id ..."
      end
      # verify the required parameter 'update_group_by_id_parameters' is set
      fail ArgumentError, "Missing the required parameter 'update_group_by_id_parameters' when calling GroupsApi.update_group_by_id" if update_group_by_id_parameters.nil?
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.update_group_by_id" if group_id.nil?
      # resource path
      local_var_path = "/group/{GroupId}".sub('{format}','json').sub('{' + 'GroupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_group_by_id_parameters)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#update_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
